
@{
    ViewData["Title"] = "Open case";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model Targetcom.Models.ViewModels.CaseVM;

<style>
    @@keyframes fadeIn {
	 from {
		 opacity: 0;
	}
	 to {
		 opacity: 1;
	}
}
 @@keyframes chill {
	 from {
		 opacity: 1;
	}
	 to {
		 opacity: 1;
	}
}
 @@keyframes fadeOut {
	 from {
		 opacity: 1;
	}
	 to {
		 opacity: 0;
	}
}
 p {
	 color: white;
	 opacity: 0;
	 font-family: "Source Sans Pro";
	 animation: fadeIn 2s ease-out, chill 2s 2s, fadeOut 2s 4s;
}
    .buybtn {
        outline: 0 !important;
        border: 0;
        transition: .2s;
    }

        .buybtn:hover {
            transform: scale(1.050);
        }
    .flick {
        animation: flicks 2s ease-in;
    }
    @@keyframes flicks {
        0% {
            opacity: 0%;
        }
        40% {
            opacity: 0%;
        }
        100% {
            opacity: 100%;
        }
    }
    .price {
        background-color: rgba(0, 0, 0, 0.30);
    }
    .effect {
        transition: .2s;
        text-decoration: none;
    }
    .night .effect:hover {
        background-color: white;
        color: #34a8ff;
        text-decoration: none;
    }
    .effect:hover {
        background-color: #222222;
        color: #34a8ff;
        text-decoration: none;
    }
</style>
<div class="gap d-flex gap day_color_font" style="font-family: Poppins, sans-serif;">
    <partial name="SideBar" model="new Tuple<int, int>(Model.IdentityProfile.Friendships.Count(w => w.FriendStatus == Env.Invite && w.FriendId == Model.IdentityProfile.Id),0)" />
    <div style="width: 100%" class="d-flex flex-column">
        @if (Model.CaseType == Env.DefaultCase)
        {
            <div class="day_back_head p-3 rounded d-flex justify-content-between">
                <h4 class="m-0 day_color_main">Silver case</h4>
                <div class="d-flex align-items-center">
                    <span class="m-0 day_color_main">Count opening: @Model.IdentityProfile.Cases.FirstOrDefault(f => f.CaseType == Env.DefaultCase).CaseCount</span>
                    <a class="border-0 day_color_font day_back_main font-weight-bold rounded ml-2 p-2 effect" asp-controller="Vip" asp-action="Opencase" asp-route-type="@Model.CaseType" style="outline:0;">Open</a>
                </div>
            </div>
        }
        else
        {
            <div class="day_back_head p-3 rounded d-flex justify-content-between">
                <h4 class="m-0 day_color_main">Premium case</h4>
                <div class="d-flex align-items-center">
                    <span class="m-0 day_color_main">Count opening: @Model.IdentityProfile.Cases.FirstOrDefault(f => f.CaseType == Env.PremiumCase).CaseCount</span>
                    <a class="border-0 day_color_font day_back_main font-weight-bold rounded ml-2 p-2 effect" asp-controller="Vip" asp-action="Opencase" asp-route-type="@Model.CaseType" style="outline:0;">Open</a>
                </div>
            </div>
        }
        @if (Model.Attempts != "0 attempts")
        {
            <div class="overflow-hidden position-relative">
                <div class="position-absolute d-flex justify-content-center align-items-center" style="width: 100%; height: 100%;">
                    <div class="rounded p-3 day_back_head d-flex flex-column flick">
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 130px; height: 130px;">
                            @if (Model.CaseType == Env.DefaultCase)
                            {
                                <div class="p-3 bg-light rounded-circle d-flex justify-content-center align-items-center" style="width: 4rem; height: 4rem;">
                                    <h4 class="m-0 day_color_main">@Model.Prize.Item2</h4>
                                </div>
                            }
                            else
                            {
                                <div class="p-3 bg-warning rounded-circle d-flex justify-content-center align-items-center" style="width: 4rem; height: 4rem;">
                                    <h4 class="m-0 day_color_main">@Model.Prize.Item2</h4>
                                </div>
                            }
                            <span class="mt-2">@Model.Prize.Item1</span>
                        </div>
                    </div>
                </div>
                <canvas style="width: 100%;"></canvas>
            </div>
            <script>
                var canvas = document.querySelector('canvas');
                var c = canvas.getContext('2d');

                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;

                var mouse = {
                    x: window.innerWidth / 2,
                    y: window.innerHeight / 2
                };

                var isMouseDown = false;

                window.addEventListener("mousedown", function () {
                    isMouseDown = true;
                });

                window.addEventListener("mouseup", function () {
                    isMouseDown = false;
                });


                function Cannon(x, y, width, height, color) {
                    this.x = x;
                    this.y = y;
                    this.width = width;
                    this.height = height;
                    this.angle = 0;
                    this.color = color;

                    this.update = function () {
                        desiredAngle = Math.atan2(mouse.y - this.y, mouse.x - this.x);
                        this.angle = desiredAngle;
                        this.draw();
                    };

                    this.draw = function () {
                        c.save();
                        c.translate(this.x, this.y);
                        c.rotate(this.angle);
                        c.beginPath();
                        c.fillStyle = this.color;
                        c.shadowColor = this.color;
                        c.shadowBlur = 3;
                        c.shadowOffsetX = 0;
                        c.shadowOffsetY = 0;
                        c.fillRect(0, -this.height / 2, this.width, height);
                        c.closePath();
                        c.restore();
                    };
                }

                function Cannonball(x, y, dx, dy, radius, color, cannon, particleColors) {
                    this.x = x;
                    this.y = y;
                    this.dx = dx;
                    this.dy = -dy;
                    this.radius = radius;
                    this.color = color;
                    this.particleColors = particleColors;
                    this.source = cannon;
                    this.timeToLive = canvas.height / (canvas.height + 800);

                    this.init = function () {
                        // Initialize the cannonballs start coordinates (from muzzle of cannon)
                        this.x = Math.cos(this.source.angle) * this.source.width;
                        this.y = Math.sin(this.source.angle) * this.source.width;

                        // Translate relative to canvas positioning
                        this.x = this.x + (canvas.width / 2);
                        this.y = this.y + (canvas.height);

                        // Determine whether the cannonball should be
                        // fired to the left or right of the cannon
                        if (mouse.x - canvas.width / 2 < 0) {
                            this.dx = -this.dx;
                        }

                        this.dy = Math.sin(this.source.angle) * 8;
                        this.dx = Math.cos(this.source.angle) * 8;
                    };

                    this.update = function () {
                        if (this.y + this.radius + this.dy > canvas.height) {
                            this.dy = -this.dy;
                        } else {
                            this.dy += gravity;
                        }

                        this.x += this.dx;
                        this.y += this.dy;
                        this.draw();

                        this.timeToLive -= 0.01;
                    };

                    this.draw = function () {
                        c.save();
                        c.beginPath();
                        c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
                        c.shadowColor = this.color;
                        c.shadowBlur = 5;
                        c.shadowOffsetX = 0;
                        c.shadowOffsetY = 0;
                        c.fillStyle = this.color;
                        c.fill();
                        c.closePath();
                        c.restore();
                    };

                    this.init();
                }

                function Particle(x, y, dx, dy, radius, color) {
                    this.x = x;
                    this.y = y;
                    this.dx = dx;
                    this.dy = -dy;
                    this.radius = 5;
                    this.color = color;
                    this.timeToLive = 1;
                    // this.mass = 0.2;

                    this.update = function () {
                        if (this.y + this.radius + this.dy > canvas.height) {
                            this.dy = -this.dy;
                        }

                        if (this.x + this.radius + this.dx > canvas.width || this.x - this.radius + this.dx < 0) {
                            this.dx = -this.dx;
                        }
                        // this.dy += gravity * this.mass;
                        this.x += this.dx;
                        this.y += this.dy;
                        this.draw();

                        this.timeToLive -= 0.01;
                    };

                    this.draw = function () {
                        c.save();
                        c.beginPath();
                        c.arc(this.x, this.y, 2, 0, Math.PI * 2, false);
                        c.shadowColor = this.color;
                        c.shadowBlur = 10;
                        c.shadowOffsetX = 0;
                        c.shadowOffsetY = 0;
                        c.fillStyle = this.color;
                        c.fill();

                        c.closePath();

                        c.restore();
                    };
                }


                function Explosion(cannonball) {
                    this.particles = [];
                    this.rings = [];
                    this.source = cannonball;

                    this.init = function () {
                        for (var i = 0; i < 10; i++) {

                            var dx = (Math.random() * 6) - 3;
                            var dy = (Math.random() * 6) - 3;

                            // var hue = (255 / 5) * i;
                            // var color = "hsl(" + hue + ", 100%, 50%)";
                            var randomColorIndex = Math.floor(Math.random() * this.source.particleColors.length);
                            var randomParticleColor = this.source.particleColors[randomColorIndex];


                            this.particles.push(new Particle(this.source.x, this.source.y, dx, dy, 1, randomParticleColor));
                        }

                        // Create ring once explosion is instantiated
                        // this.rings.push(new Ring(this.source, "blue"));
                    };

                    this.init();

                    this.update = function () {
                        for (var i = 0; i < this.particles.length; i++) {
                            this.particles[i].update();

                            // Remove particles from scene one time to live is up
                            if (this.particles[i].timeToLive < 0) {
                                this.particles.splice(i, 1);
                            }
                        }

                        // Render rings
                        for (var j = 0; j < this.rings.length; j++) {
                            this.rings[j].update();

                            // Remove rings from scene one time to live is up
                            if (this.rings[j].timeToLive < 0) {
                                this.rings.splice(i, 1);
                            }
                        }
                    };
                }

                var gravity = 0.08;
                var desiredAngle = 0;
                var cannon, cannonballs, explosions, colors;

                function initializeVariables() {
                    cannon = new Cannon(canvas.width / 2, canvas.height, 20, 10, "white");
                    cannonballs = [];
                    explosions = [];
                    colors = [


                        // Red / Orange
                        {
                            cannonballColor: "#fff",
                            particleColors: [
                                "#ff4747",
                                "#00ceed",
                                "#fff",
                            ]
                        }

                    ];

                }

                initializeVariables();

                var timer = 0;
                var isIntroComplete = false;
                var introTimer = 0;


                function animate() {
                    window.requestAnimationFrame(animate);

                    c.fillStyle = "rgba(18, 18, 18, 0.2)";
                    c.fillRect(0, 0, canvas.width, canvas.height);
                    cannon.update();

                    if (isIntroComplete === false) {
                        introTimer += 1;

                        if (introTimer % 3 === 0) {
                            var randomColor = Math.floor(Math.random() * colors.length);
                            var color = colors[randomColor];

                            cannonballs.push(new Cannonball(canvas.width / 2, canvas.height / 2, 2, 2, 4, color.cannonballColor, cannon, color.particleColors));
                        }

                        if (introTimer > 30) {
                            isIntroComplete = true;
                        }

                    }


                    // Render cannonballs
                    for (var i = 0; i < cannonballs.length; i++) {
                        cannonballs[i].update();

                        if (cannonballs[i].timeToLive <= 0) {

                            // Create particle explosion after time to live expires
                            explosions.push(new Explosion(cannonballs[i]));

                            cannonballs.splice(i, 1);

                        }
                    }

                    // Render explosions
                    for (var j = 0; j < explosions.length; j++) {
                        //Do something
                        explosions[j].update();

                        // Remove explosions from scene once all associated particles are removed
                        if (explosions[j].particles.length <= 0) {
                            explosions.splice(j, 1);
                        }
                    }


                    if (isMouseDown === true) {
                        timer += 1;
                        if (timer % 3 === 0) {
                            var randomParticleColorIndex = Math.floor(Math.random() * colors.length);
                            var randomColors = colors[randomParticleColorIndex];

                            cannonballs.push(new Cannonball(mouse.x, mouse.y, 2, 2, 4, randomColors.cannonballColor, cannon, randomColors.particleColors));
                        }
                    }
                }

                animate();
            </script>
        }
        else
        {
            <div class="d-flex justify-content-center align-items-center rounded day_back_head rounded p-3">
                <h4 class="day_color_main m-0">You dont have enought attempts.</h4>
            </div>
        }
        @if (Model.CaseType == Env.DefaultCase)
        {
            <div class="shadow bg-success rounded p-3 mt-4 text-light">
                <h4>Silver case</h4>
                <hr />
                <div class="d-flex flex-column align-items-center" style="gap: 1rem;">
                    <div class="d-flex" style="gap: 1rem;">
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center p-3" style="width: 140px; height: 140px;">
                            <div class="p-3 day_back_main rounded-circle">
                                <h4 class="m-0">@Env.SilverLvl1PrizeCoin</h4>
                            </div>
                            <span class="mt-2">coins</span>
                            <span>C40% : R60%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 day_back_main rounded-circle">
                                <h4 class="m-0">@Env.SilverLvl2PrizeCoin</h4>
                            </div>
                            <span class="mt-2">coins</span>
                            <span>C30% : R60%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 day_back_main rounded-circle">
                                <h4 class="m-0">@Env.SilverLvl3PrizeCoin</h4>
                            </div>
                            <span class="mt-2">coins</span>
                            <span>C20% : R60%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 day_back_main rounded-circle">
                                <h4 class="m-0">@Env.SilverLvl4PrizeCoin</h4>
                            </div>
                            <span class="mt-2">coins</span>
                            <span>C10% : R60%</span>
                        </div>
                    </div>
                    <div class="d-flex" style="gap: 1rem;">
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-success rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Lvl.1 game</span>
                            <span>C40% : R40%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-success rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Lvl.2 game</span>
                            <span>C30% : R40%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-success rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Lvl.3 game</span>
                            <span>C20% : R40%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-success rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Lvl.4 game</span>
                            <span>C10% : R40%</span>
                        </div>
                    </div>
                    <div class="d-flex" style="gap: 1rem;">
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-info rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Molecular grid</span>
                            <span>C40% : R10%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-info rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Blick grid</span>
                            <span>C30% : R10%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-info rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Slime grid</span>
                            <span>C20% : R10%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-info rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Cogti grid</span>
                            <span>C10% : R10%</span>
                        </div>
                    </div>
                    <div class="price rounded d-flex flex-column justify-content-center align-items-center p-3" style="width:calc(560px + 3rem);">
                        <div class="p-3 bg-danger rounded-circle d-flex justify-content-center align-items-center" style="width: 60px; height: 60px;">
                            <h4 class="m-0">@Env.SilverJackpotPrizeCoin</h4>
                        </div>
                        <span class="mt-2">Jackpot coins</span>
                        <span>1%</span>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="shadow rounded bg-warning p-3 mt-4 text-light">
                <h4>Premium case</h4>
                <hr />
                <div class="d-flex flex-column align-items-center" style="gap: 1rem;">
                    <div class="d-flex" style="gap: 1rem;">
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 day_back_main rounded-circle">
                                <h4 class="m-0">@Env.PremiumLvl1PrizeCoin</h4>
                            </div>
                            <span class="mt-2">coins</span>
                            <span>C40% : R60%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 day_back_main rounded-circle">
                                <h4 class="m-0">@Env.PremiumLvl2PrizeCoin</h4>
                            </div>
                            <span class="mt-2">coins</span>
                            <span>C30% : R60%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 day_back_main rounded-circle">
                                <h4 class="m-0">@Env.PremiumLvl3PrizeCoin</h4>
                            </div>
                            <span class="mt-2">coins</span>
                            <span>C20% : R60%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 day_back_main rounded-circle">
                                <h4 class="m-0">@Env.PremiumLvl4PrizeCoin</h4>
                            </div>
                            <span class="mt-2">coins</span>
                            <span>C10% : R60%</span>
                        </div>
                    </div>
                    <div class="d-flex" style="gap: 1rem;">
                        <div class="d-flex" style="gap: 1rem;">
                            <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                                <div class="p-3 bg-success rounded-circle" style="width: 56px;">
                                    <h4 class="m-0 text-center">1</h4>
                                </div>
                                <span class="mt-2">Lvl.1 game</span>
                                <span>C40% : R30%</span>
                            </div>
                            <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                                <div class="p-3 bg-success rounded-circle" style="width: 56px;">
                                    <h4 class="m-0 text-center">1</h4>
                                </div>
                                <span class="mt-2">Lvl.2 game</span>
                                <span>C30% : R30%</span>
                            </div>
                            <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                                <div class="p-3 bg-success rounded-circle" style="width: 56px;">
                                    <h4 class="m-0 text-center">1</h4>
                                </div>
                                <span class="mt-2">Lvl.3 game</span>
                                <span>C20% : R30%</span>
                            </div>
                            <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                                <div class="p-3 bg-success rounded-circle" style="width: 56px;">
                                    <h4 class="m-0 text-center">1</h4>
                                </div>
                                <span class="mt-2">Lvl.4 game</span>
                                <span>C10% : R30%</span>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex" style="gap: 1rem;">
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-warning rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Heart grid</span>
                            <span>C40% : R10%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-warning rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Ghost grid</span>
                            <span>C30% : R10%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-warning rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Scan grid</span>
                            <span>C20% : R10%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 140px; height: 140px;">
                            <div class="p-3 bg-warning rounded-circle" style="width: 56px;">
                                <h4 class="m-0 text-center">1</h4>
                            </div>
                            <span class="mt-2">Shark grid</span>
                            <span>C10% : R10%</span>
                        </div>
                    </div>
                    <div class="d-flex" style="gap: 1rem;">
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 295px; height: 130px;">
                            <span class="mt-2 day_color_main day_back_head p-3 rounded font-weight-bold">Image Widget</span>
                            <span>C5% : R60%</span>
                        </div>
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width: 295px; height: 130px;">
                            <span class="mt-2 day_color_main day_back_head p-3 rounded font-weight-bold">Rainbow nickname</span>
                            <span>C5% : R30%</span>
                        </div>
                    </div>
                    @if (!Model.IdentityProfile.IsPremium)
                    {
                        <div class="price rounded d-flex flex-column justify-content-center align-items-center" style="width:calc(560px + 3rem);">
                            <div class="p-3 d-flex flex-column align-items-center">
                                @{ string fragment = "PREMIUM"; }
                                @if (Model.IdentityProfile.Fragment > 0)
                                {
                                    <h3 class="text-center" style="letter-spacing: 1rem;">
                                        @for (int i = 0; i < Model.IdentityProfile.Fragment; ++i)
                                        {
                                            <span>@fragment[i]</span>
                                        }
                                    </h3>
                                }
                                else
                                {
                                    <span>Collect 7 fragments to get a premium subscription</span>
                                }
                                @if (Model.IdentityProfile.Fragment == 7)
                                {
                                    @using (Html.BeginForm(FormMethod.Post))
                                    {
                                        <button asp-controller="Vip" asp-action="GetPremiumPost" class="buybtn font-weight-bold bg-light day_color_main rounded pl-3 pr-3 p-2">GET A PREMIUM PLAN</button>
                                    }
                                }
                                else
                                {
                                    <span class="mt-2 text-center">JACKPOT PREMIUM PLAN PERMANENT</span>
                                }
                                <span>C5% : R10%</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

