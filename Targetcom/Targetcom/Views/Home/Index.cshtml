@{
    ViewData["Title"] = "News";
}
@model Targetcom.Models.ViewModels.NewsVM;

<head>
    <link href="~/css/VTabs.css" rel="stylesheet" />
</head>

<style>
    .gap {
        gap: 1rem;
    }


    .activel {
        border-left: 3px solid #0094ff;
    }

    .disable {
        display: none;
    }

    .btnlike:hover {
        text-decoration: none;
    }

    img {
        object-fit: cover;
    }

    .anim {
        transition: 2s;
        animation: ocean 10s ease-in-out alternate infinite;
    }

    @@keyframes ocean {
        0% {
            color: #b3e536;
            text-shadow: 0 0 40px #b3e536;
        }

        100% {
            color: #0094ff;
            text-shadow: 0 0 40px #0094ff;
        }
    }

    .down {
        animation: loadDown 1s ease-in-out forwards;
    }

    @@keyframes loadDown {
        0% {
            opacity: 100%;
        }

        100% {
            opacity: 0%;
            visibility: hidden;
        }
    }
    .navbtn:hover {
        transform: scale(1.040);
    }
    .btngame:hover {
        text-decoration: none;
    }

    .pointer {
        border-top: 0;
        border-left: 0;
        border-right: 0;
        border-bottom: 2px solid white;
    }

    .borders {
        border: 0;
        background-repeat: no-repeat;
    }
</style>
<input type="Hidden" id="Item" value="@Model.ListItem" />
<div class="gap d-flex gap day_color_font" style="font-family: Poppins, sans-serif;">
    <partial name="SideBar" model="new Tuple<int, int>(Model.IdentityProfile.Friendships.Count(w => w.FriendStatus == Env.Invite && w.FriendId == Model.IdentityProfile.Id),0)" />

    <div class="d-flex" style="width: 100%; gap: 1rem;">
        <div style="width: 75%" class="d-flex flex-column gap">
            @using (Html.BeginForm("PublishPost", "Home", FormMethod.Post))
            {
            <div class="card border-0 day_back_head overflow-auto rounded">
                <div class="card-body p-2">
                    <textarea class="form-control day_back_head day_color_font item-font m-0 rounded-0 border-0" id="summer" name="content" placeholder="Tell us what's new?"></textarea>
                </div>
                <div class="p-2 day_back_head" id="badgefiles">
                    <div class="badge badge-success disable" id="file1"><h6 class="m-0">Firstfile</h6></div>
                    <div class="badge badge-success disable" id="file2"><h6 class="m-0">Secondfile</h6></div>
                    <div class="badge badge-success disable" id="file3"><h6 class="m-0">Thirdfile</h6></div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center">
                        @if (Model.IdentityProfile.UrlAvatar == Targetcom.Env.DefaultImageUrl)
                        {
                            <img src="@Env.DefaultImageUrl" alt="Avatar" class="img-card rounded-circle" style="width: 38px; height: 38px;" />
                        }
                        else
                        {
                            <img src="@Model.IdentityProfile.UrlAvatar" alt="Avatar" class="img-card rounded-circle" style="width: 38px; height: 38px; " />
                        }
                        <div class="d-flex flex-column ml-2">
                            <p class="m-0 day_color_main" style="font-size: 14px;">
                                @Model.IdentityProfile.Name
                                @Model.IdentityProfile.Surname
                                @if (Model.IdentityProfile.IsVerify)
                                {
                                    <i class="fas fa-check" style="font-size: 13px;"></i>
                                }
                            </p>
                        </div>
                    </div>
                    <div class="d-flex align-items-center">
                        <a class="text-decoration-none day_color_font mr-2" data-toggle="modal" data-target="#upload"><i class="fas fa-upload"></i></a>
                        <button type="submit" class="btn day_back_main text-light pl-4 pr-4 disable" style="font-size: 14px;" id="publishpost">Publish</button>
                        <div class="modal fade" id="upload" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content day_back_head">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="exampleModalLabel">Pinned files</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body d-flex flex-column gap">
                                        <div class="form-group m-0">
                                            <input placeholder="Enter url image 1" name="urlimg1" id="urlimges1" class="form-control border-0 day_back_default day_color_font" style="font-size: 14px;" />
                                        </div>
                                        <div class="form-group m-0">
                                            <input placeholder="Enter url image 2" name="urlimg2" id="urlimges2" class="form-control border-0 day_back_default day_color_font" style="font-size: 14px;" />
                                        </div>
                                        <div class="form-group m-0">
                                            <input placeholder="Enter url image 3" name="urlimg3" id="urlimges3" class="form-control border-0 day_back_default day_color_font" style="font-size: 14px;" />
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn day_back_main text-light" id="upload" data-dismiss="modal" aria-label="Close" asp-controller="Images" asp-action="PublishPost">Upload</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <script>
                            document.getElementById("summer").addEventListener("keyup", () => {

                                let file1 = document.getElementById("urlimges1").value;
                                let file2 = document.getElementById("urlimges2").value;
                                let file3 = document.getElementById("urlimges3").value;

                                if (document.getElementById("summer").value.length > 0) {
                                    document.getElementById("publishpost").classList.remove("disable");
                                }
                                else {
                                    document.getElementById("publishpost").classList.add("disable");
                                }

                                if (file1 != "" || file2 != "" || file3 != "") {
                                    document.getElementById("publishpost").classList.remove("disable");
                                }
                            });
                            document.getElementById("upload").addEventListener("click", () => {
                                let file1 = document.getElementById("urlimges1").value;
                                let file2 = document.getElementById("urlimges2").value;
                                let file3 = document.getElementById("urlimges3").value;

                                let badge1 = document.getElementById("file1");
                                let badge2 = document.getElementById("file2");
                                let badge3 = document.getElementById("file3");

                                if (file1 != "") {
                                    badge1.classList.remove("disable");
                                }
                                else {
                                    badge1.classList.add("disable");
                                }
                                if (file2 != "") {
                                    badge2.classList.remove("disable");
                                }
                                else {
                                    badge2.classList.add("disable");
                                }
                                if (file3 != "") {
                                    badge3.classList.remove("disable");
                                }
                                else {
                                    badge3.classList.add("disable");
                                }

                                if (file1 != "" || file2 != "" || file3 != "") {
                                    document.getElementById("publishpost").classList.remove("disable");
                                }
                                else {
                                    document.getElementById("publishpost").classList.add("disable");
                                }
                            });
                            
                        </script>
                    </div>
                </div>
            </div>
            }
        <div class="rounded d-flex flex-column gap">
            @if (Model.ProfilePostages.Where(w => w.IsPinned).Any())
            {
                <div class="d-flex align-items-center">
                    <hr class="m-0 w-100 bg-light" />
                    <h4 class="day_color_font ml-3 mr-3">Advertisement</h4>
                    <hr class="m-0 w-100 bg-light" />
                </div>
                <div class="d-flex flex-column gap">
                    @foreach (var item in Model.ProfilePostages.Where(w => w.IsPinned))
                    {
                        var id = Guid.NewGuid();
                        <partial name="Components/ProfilePost" model="new Targetcom.Models.ViewModels.ProfilePostComponentVM() { IdentityProfile = Model.IdentityProfile, Postage = item, Guid = id }" />
                    }
                </div>
                <hr class="m-0 w-100 bg-light" />
            }
        <div class="d-flex flex-column gap">
            <div class="rounded overflow-hidden day_back_head d-flex flex-column">
                @foreach (var item in Model.LatestGames.OrderByDescending(d => d.TimeStamp))
            {
                <a class="position-relative bg-dark btngame" asp-controller="Game" asp-action="Index" style="width: 100%; height: 30vh;">
                    <img src="@item.ImageUrl" class="rounded d-flex position-absolute" style="height: 30vh; width:100%; object-fit: cover; filter: opacity(20%) blur(2px)" alt="game" />
                    <div class="d-flex align-items-center" style="height: 100%;">
                        <div class="ml-5">
                            <img src="@item.ImageUrl" class="rounded d-flex" style="height: 128px; width:128px; object-fit: cover;" alt="game" />
                        </div>
                        <div class="ml-4 d-flex flex-column">
                            <h5 class="text-light">@item.Name</h5>
                            <p class="text-light">@item.Description</p>
                        </div>
                    </div>
                </a>
                <div class="day_back_head">
                    <a asp-controller="Game" asp-action="Index"  class="btn btn-outline-light rounded-0 pointer ml-5">Go to play games</a>
                </div>
            }
            </div>
        </div>
            <div id="Allpost">
                <div class="d-flex flex-column gap">
                    @foreach (var item in Model.ProfilePostages.Where(w => !w.IsPinned))
                    {
                        var id = Guid.NewGuid();
                        <partial name="Components/ProfilePost" model="new Targetcom.Models.ViewModels.ProfilePostComponentVM() { IdentityProfile = Model.IdentityProfile, Postage = item, Guid = id }" />
                    }
                    <div class="p-2 d-flex justify-content-center">
                        @if (Model.Current_AllPost_Page > 0)
                        {
                            <a asp-controller="Home" asp-action="Index" asp-route-listitem="All" asp-route-page="@(Model.Current_AllPost_Page - 1)" class="p-3 d-flex align-items-center text-decoration-none text-light day_back_main rounded border-0 navbtn"><i class="fas fa-arrow-left m-0 mr-2"></i>Prev</a>
                        }
                        @if ((Model.Current_AllPost_Lenght / Env.NEWS_LOADING_LIMIT) > Model.Current_AllPost_Page)
                        {
                            <a asp-controller="Home" asp-action="Index" asp-route-listitem="All" asp-route-page="@(Model.Current_AllPost_Page + 1)" class="p-3 d-flex align-items-center text-decoration-none text-light day_back_main rounded border-0 ml-3 navbtn">Next <i class="fas fa-arrow-right m-0 ml-2"></i></a>
                        }
                    </div>
                </div>
            </div>
            <div id="Peoplepost">
                <div class="d-flex flex-column gap">
                    @foreach (var item in Model.ProfilePostages.Where(w => !w.IsObject && !w.IsPinned))
                    {
                        var id = Guid.NewGuid();
                        <partial name="Components/ProfilePost" model="new Targetcom.Models.ViewModels.ProfilePostComponentVM() { IdentityProfile = Model.IdentityProfile, Postage = item, Guid = id }" />
                    }
                    <div class="p-2 d-flex justify-content-center">
                        @if (Model.Current_TextPost_Page > 0)
                        {
                            <a asp-controller="Home" asp-action="Index" asp-route-listitem="textpost" asp-route-textpage="@(Model.Current_TextPost_Page - 1)" class="p-3 d-flex align-items-center text-decoration-none text-light day_back_main rounded border-0 navbtn"><i class="fas fa-arrow-left m-0 mr-2"></i>Prev</a>
                        }
                        @if ((Model.Current_TextPost_Lenght / Env.NEWS_LOADING_LIMIT) > Model.Current_TextPost_Page)
                        {
                            <a asp-controller="Home" asp-action="Index" asp-route-listitem="textpost" asp-route-textpage="@(Model.Current_TextPost_Page + 1)" class="p-3 d-flex align-items-center text-decoration-none text-light day_back_main rounded border-0 ml-3 navbtn">Next <i class="fas fa-arrow-right m-0 ml-2"></i></a>
                        }
                    </div>
                </div>
            </div>
            <div id="Peopleupdate">
                <div class="d-flex flex-column gap">
                    @foreach (var item in Model.ProfilePostages.Where(w => w.IsObject && !w.IsPinned))
                    {
                        var id = Guid.NewGuid();
                        <partial name="Components/ProfilePost" model="new Targetcom.Models.ViewModels.ProfilePostComponentVM() { IdentityProfile = Model.IdentityProfile, Postage = item, Guid = id }" />
                    }
                    <div class="p-2 d-flex justify-content-center">
                        @if (Model.Current_Updates_Page > 0)
                        {
                            <a asp-controller="Home" asp-action="Index" asp-route-listitem="@Env.Updates" asp-route-updatepage="@(Model.Current_Updates_Page - 1)" class="p-3 d-flex align-items-center text-decoration-none text-light day_back_main rounded border-0 navbtn"><i class="fas fa-arrow-left m-0 mr-2"></i>Prev</a>
                        }
                        @if ((Model.Current_Updates_Lenght / Env.NEWS_LOADING_LIMIT) > Model.Current_Updates_Page)
                        {
                            <a asp-controller="Home" asp-action="Index" asp-route-listitem="@Env.Updates" asp-route-updatepage="@(Model.Current_Updates_Page + 1)" class="p-3 d-flex align-items-center text-decoration-none text-light day_back_main rounded border-0 ml-3 navbtn">Next <i class="fas fa-arrow-right m-0 ml-2"></i></a>
                        }
                    </div>
                </div>
            </div>
        </div>
        </div>
        <div style="width: 25%;" class="gap d-flex flex-column">
            <div class="card border-0 day_back_head overflow-auto rounded" style="position: sticky; top: 70px;">
                <div class="card-body pt-2 pb-2 pr-0 pl-0" id="newsbar">
                    <nav class="left-navtabs" style="width: 100%;">
                        <a asp-controller="Home" asp-action="Index" asp-route-listitem="All" asp-route-page="@Model.Current_AllPost_Page" class="navtabs-item is-active">All post</a>
                        <hr class="m-0 p-1" />
                        <a asp-controller="Home" asp-action="Index" asp-route-listitem="textpost" asp-route-textpage="@Model.Current_TextPost_Page" class="navtabs-item">People postage</a>
                        <a asp-controller="Home" asp-action="Index" asp-route-listitem="updates" asp-route-updatepage="@Model.Current_Updates_Page" class="navtabs-item">People updated</a>
                        <span class="navtabs-indicator"></span>
                    </nav>
                    <script>
                        const indicator = document.querySelector(".navtabs-indicator");
                        const items = document.querySelectorAll(".navtabs-item");
                        let dives = new Array(document.getElementById("Allpost"),
                            document.getElementById("Peoplepost"),
                            document.getElementById("Peopleupdate"));
                        Adding();
                        console.log(document.getElementById("Item").value);
                        if (document.getElementById("Item").value == "All") {
                            dives[0].classList.remove("d-none");
                            handleIndicator(items[0]);
                        }
                        else if (document.getElementById("Item").value == "textpost") {
                            dives[1].classList.remove("d-none");
                            handleIndicator(items[1]);
                        }
                        else if (document.getElementById("Item").value == "updates") {
                            dives[2].classList.remove("d-none");
                            handleIndicator(items[2]);
                        }
                        else {
                            dives[0].classList.remove("d-none");
                            handleIndicator(items[0]);
                        }
                        function handleIndicator(el) {
                            items.forEach(item => {
                                item.classList.remove("is-active");
                                item.removeAttribute("style");
                            });

                            indicator.style.height = `${el.offsetHeight}px`;
                            indicator.style.top = `${el.offsetTop}px`;
                            indicator.style.backgroundColor = el.getAttribute("active-color");

                            el.classList.add("is-active");
                            //el.style.color = "#6200ee";
                            el.style.color = "#ffffff";
                        }
                        function Adding() {
                            for (var i = 0; i < dives.length; ++i) {
                                dives[i].classList.add("d-none");
                            }
                        }
                        //for (let i = 0; i < items.length; ++i) {
                        //    items[i].addEventListener("click", e => {
                        //        Adding();
                        //        dives[i].classList.remove("d-none");
                        //        handleIndicator(e.target);
                        //    });
                        //    items[i].classList.contains("is-active") && handleIndicator(items[i]);
                        //}
                        //items.forEach((item, index) => {
                        //    item.addEventListener("click", e => {
                        //        handleIndicator(e.target);
                        //    });
                        //    item.classList.contains("is-active") && handleIndicator(item);
                        //});
                    </script>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="position-fixed" id="downid" style="top: 0; left:0; width: 100vw; height: 100vh; z-index: 999;">
    <div class="d-flex justify-content-center align-items-center flex-column day_back_head w-100 h-100">
        <i class="far fa-newspaper d-flex justify-content-center anim" style="width: 100%; font-size: 10vw;"></i>
        <h2 class="day_color_font mt-4 font-weight-bold" style="letter-spacing: 2px; font-family: Montserrat, sans-serif;">News</h2>
    </div>
</div>

@section Scripts {
    <script>
        var before_loadtime = new Date().getTime();
        window.onload = Pageloadtime;
        function Pageloadtime() {
            var aftr_loadtime = new Date().getTime();
            pgloadtime = (aftr_loadtime - before_loadtime) / 1000
            setTimeout(() => {
                var loadscreen = document.getElementById("downid");
                loadscreen.classList.add("down");
            }, pgloadtime);
        }
    </script>
}